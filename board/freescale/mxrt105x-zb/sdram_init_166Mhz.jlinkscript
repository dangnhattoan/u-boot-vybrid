/*********************************************************************
*              SEGGER MICROCONTROLLER GmbH & Co. K.G.                *
*        Solutions for real time microcontroller applications        *
**********************************************************************
*                                                                    *
*        (c) 2011-2015 SEGGER Microcontroller GmbH & Co. KG          *
*                                                                    *
* Internet: www.segger.com Support: support@segger.com               *
*                                                                    *
**********************************************************************
----------------------------------------------------------------------
Purpose : 
---------------------------END-OF-HEADER------------------------------
*/


void Clock_Init() {
  unsigned int reg;
  
  //==== DCDC Setting ========================
  // Setting the VDD_SOC to 1.275V. It is necessary to config AHB to 600Mhz. */
  reg = MEM_ReadU32(0x4008000C);
  reg = reg & 0xFFFFFFE0;
  reg = reg | 0x13;
  MEM_WriteU32(0x4008000C, reg);
  /* Waiting for DCDC_STS_DC_OK bit is asserted */
  do {
    reg = MEM_ReadU32(0x40080000);
  } while ((reg & 0x80000000) == 0);

  // Enable all clocks
  MEM_WriteU32(0x400FC068,0xffffffff);
  MEM_WriteU32(0x400FC06C,0xffffffff);
  MEM_WriteU32(0x400FC070,0xffffffff);
  MEM_WriteU32(0x400FC074,0xffffffff);
  MEM_WriteU32(0x400FC078,0xffffffff);
  MEM_WriteU32(0x400FC07C,0xffffffff);
  MEM_WriteU32(0x400FC080,0xffffffff);

  //==== Configure CCM_ANALOG ================
  // CCM_ANALOG_PLL_ARM
  // Fout = Fin * div_select/2.0
  // PLL1_MAIN_CLK = (24MHz * 100) / 2.0 = 1.2GHz
  MEM_WriteU32(0x400D8000, 0x00012064);
  do {
    reg = MEM_ReadU32(0x400D8000);
  } while((reg & 0x80000000) == 0);
  MEM_WriteU32(0x400D8000, 0x00002064);

  // CCM_ANALOG_PLL_SYS
  // Fout = Fref * 22
  // Fref = 24MHz (BYPASS_CLK_SRC = 0x0)
  // NUM = 56
  // DENOM = 256
  // SYS_PLL = 24MHz * (22 + 56 / 256) = 533.25MHz
  MEM_WriteU32(0x400D8050, 0x00000038); // NUM
  MEM_WriteU32(0x400D8060, 0x00000100); // DENOM
  MEM_WriteU32(0x400D8030, 0x00012001);
  do {
    reg = MEM_ReadU32(0x400D8030);
  } while((reg & 0x80000000) == 0);
  MEM_WriteU32(0x400D8030, 0x00002001);
  
  // PFD2_FRAC = 29 (0x1D)
  // PLL2_PFD2_CLK = 533.25MHz * 18 / PFD2_FRAC = 330.98MHz
  MEM_WriteU32(0x400D8100, 0x001D0000);
  
  //==== Configure CCM =======================
  // CCM_CBCDR (Periph_Clock_podf Div1; Semc_podf Div 2; Ahb_podf Div1; Ipg_podf Div4)
  // SEMC_ALT_CLK_SEL = 0 (PLL2_PFD2_CLK)
  // SEMC_CLK_SEL = 1 (Use ALT_CLK which is PLL2_PFD2)
  // SEMC_CLK_ROOT = PLL2_PFD2_CLK / SEMC_PODF = 330.98MHz / 2 = 165.5MHz
  MEM_WriteU32(0x400FC014, 0x00098340);
  // Wait for ALL divider handshake is finished
  do {
    reg = MEM_ReadU32(0x400FC048);
  } while((reg & 0x0001002B) != 0);

  Report("Clock Init Done");
}

void SDRAM_WaitIpCmdDone(void) 
{
  unsigned int reg;
  do
  {
      reg = MEM_ReadU32(0x402F003C);
  }while((reg & 0x3) == 0);
}

void SDRAM_Init() {
  // Config IOMUX for sdr
  MEM_WriteU32(0x401F8014,0x00000000); // EMC_00
  MEM_WriteU32(0x401F8018,0x00000000); // EMC_01
  MEM_WriteU32(0x401F801C,0x00000000); // EMC_02
  MEM_WriteU32(0x401F8020,0x00000000); // EMC_03
  MEM_WriteU32(0x401F8024,0x00000000); // EMC_04
  MEM_WriteU32(0x401F8028,0x00000000); // EMC_05
  MEM_WriteU32(0x401F802C,0x00000000); // EMC_06
  MEM_WriteU32(0x401F8030,0x00000000); // EMC_07
  MEM_WriteU32(0x401F8034,0x00000000); // EMC_08
  MEM_WriteU32(0x401F8038,0x00000000); // EMC_09
  MEM_WriteU32(0x401F803C,0x00000000); // EMC_10
  MEM_WriteU32(0x401F8040,0x00000000); // EMC_11
  MEM_WriteU32(0x401F8044,0x00000000); // EMC_12
  MEM_WriteU32(0x401F8048,0x00000000); // EMC_13
  MEM_WriteU32(0x401F804C,0x00000000); // EMC_14
  MEM_WriteU32(0x401F8050,0x00000000); // EMC_15
  MEM_WriteU32(0x401F8054,0x00000000); // EMC_16
  MEM_WriteU32(0x401F8058,0x00000000); // EMC_17
  MEM_WriteU32(0x401F805C,0x00000000); // EMC_18
  MEM_WriteU32(0x401F8060,0x00000000); // EMC_19
  MEM_WriteU32(0x401F8064,0x00000000); // EMC_20
  MEM_WriteU32(0x401F8068,0x00000000); // EMC_21
  MEM_WriteU32(0x401F806C,0x00000000); // EMC_22
  MEM_WriteU32(0x401F8070,0x00000000); // EMC_23
  MEM_WriteU32(0x401F8074,0x00000000); // EMC_24
  MEM_WriteU32(0x401F8078,0x00000000); // EMC_25
  MEM_WriteU32(0x401F807C,0x00000000); // EMC_26
  MEM_WriteU32(0x401F8080,0x00000000); // EMC_27
  MEM_WriteU32(0x401F8084,0x00000000); // EMC_28
  MEM_WriteU32(0x401F8088,0x00000000); // EMC_29
  MEM_WriteU32(0x401F808C,0x00000000); // EMC_30
  MEM_WriteU32(0x401F8090,0x00000000); // EMC_31
  MEM_WriteU32(0x401F8094,0x00000000); // EMC_32
  MEM_WriteU32(0x401F8098,0x00000000); // EMC_33
  MEM_WriteU32(0x401F809C,0x00000000); // EMC_34
  MEM_WriteU32(0x401F80A0,0x00000000); // EMC_35
  MEM_WriteU32(0x401F80A4,0x00000000); // EMC_36
  MEM_WriteU32(0x401F80A8,0x00000000); // EMC_37
  MEM_WriteU32(0x401F80AC,0x00000000); // EMC_38
  MEM_WriteU32(0x401F80B0,0x00000010); // EMC_39, DQS PIN, enable SION
  MEM_WriteU32(0x401F80B4,0x00000000); // EMC_40
  MEM_WriteU32(0x401F80B8,0x00000000); // EMC_41
  
  // PAD ctrl
  //drive strength = 0x7 to increase drive strength
  //otherwise the data7 bit may fail.
  //0x000000F1: the driver strength may not enough.
  MEM_WriteU32(0x401F8204,0x000110F9); // EMC_00
  MEM_WriteU32(0x401F8208,0x000110F9); // EMC_01
  MEM_WriteU32(0x401F820C,0x000110F9); // EMC_02
  MEM_WriteU32(0x401F8210,0x000110F9); // EMC_03
  MEM_WriteU32(0x401F8214,0x000110F9); // EMC_04
  MEM_WriteU32(0x401F8218,0x000110F9); // EMC_05
  MEM_WriteU32(0x401F821C,0x000110F9); // EMC_06
  MEM_WriteU32(0x401F8220,0x000110F9); // EMC_07
  MEM_WriteU32(0x401F8224,0x000110F9); // EMC_08
  MEM_WriteU32(0x401F8228,0x000110F9); // EMC_09
  MEM_WriteU32(0x401F822C,0x000110F9); // EMC_10
  MEM_WriteU32(0x401F8230,0x000110F9); // EMC_11
  MEM_WriteU32(0x401F8234,0x000110F9); // EMC_12
  MEM_WriteU32(0x401F8238,0x000110F9); // EMC_13
  MEM_WriteU32(0x401F823C,0x000110F9); // EMC_14
  MEM_WriteU32(0x401F8240,0x000110F9); // EMC_15
  MEM_WriteU32(0x401F8244,0x000110F9); // EMC_16
  MEM_WriteU32(0x401F8248,0x000110F9); // EMC_17
  MEM_WriteU32(0x401F824C,0x000110F9); // EMC_18
  MEM_WriteU32(0x401F8250,0x000110F9); // EMC_19
  MEM_WriteU32(0x401F8254,0x000110F9); // EMC_20
  MEM_WriteU32(0x401F8258,0x000110F9); // EMC_21
  MEM_WriteU32(0x401F825C,0x000110F9); // EMC_22
  MEM_WriteU32(0x401F8260,0x000110F9); // EMC_23
  MEM_WriteU32(0x401F8264,0x000110F9); // EMC_24
  MEM_WriteU32(0x401F8268,0x000110F9); // EMC_25
  MEM_WriteU32(0x401F826C,0x000110F9); // EMC_26
  MEM_WriteU32(0x401F8270,0x000110F9); // EMC_27
  MEM_WriteU32(0x401F8274,0x000110F9); // EMC_28
  MEM_WriteU32(0x401F8278,0x000110F9); // EMC_29
  MEM_WriteU32(0x401F827C,0x000110F9); // EMC_30
  MEM_WriteU32(0x401F8280,0x000110F9); // EMC_31
  MEM_WriteU32(0x401F8284,0x000110F9); // EMC_32
  MEM_WriteU32(0x401F8288,0x000110F9); // EMC_33
  MEM_WriteU32(0x401F828C,0x000110F9); // EMC_34
  MEM_WriteU32(0x401F8290,0x000110F9); // EMC_35
  MEM_WriteU32(0x401F8294,0x000110F9); // EMC_36
  MEM_WriteU32(0x401F8298,0x000110F9); // EMC_37
  MEM_WriteU32(0x401F829C,0x000110F9); // EMC_38
  MEM_WriteU32(0x401F82A0,0x000110F9); // EMC_39
  MEM_WriteU32(0x401F82A4,0x0001F0F9); // EMC_40  /* Pull up for NAND Flash RDY */
  MEM_WriteU32(0x401F82A8,0x000110F9); // EMC_41

  // Config SEMC Controller Registers
  MEM_WriteU32(0x402F0000,0x01000004); // MCR
  MEM_WriteU32(0x402F0008,0x00057EE8); // BMCR0
  MEM_WriteU32(0x402F000C,0x00057EEC); // BMCR1
  MEM_WriteU32(0x402F0010,0x80000019); // BR0, 16MB Valid (SDRAM)
  MEM_WriteU32(0x402F0014,0x8200001A); // BR1, 32MB Invalid (Not Used)
  MEM_WriteU32(0x402F0018,0x8400001A); // BR2, 32MB Invalid (Not Used)
  MEM_WriteU32(0x402F001C,0x8600001A); // BR3, 32MB Invalid (Not Used)
  MEM_WriteU32(0x402F0020,0x9e00001F); // BR4, 128MB Valid (NAND, AXI only)
  MEM_WriteU32(0x402F0024,0xA0000018); // BR5, 16MB Invalid (Not Used)
  MEM_WriteU32(0x402F0028,0xA8000018); // BR6, 16MB Invalid (Not Used)
  MEM_WriteU32(0x402F002C,0xA9000018); // BR7, 16MB Invalid (Not Used)
  MEM_WriteU32(0x402F0030,0x0000001F); // BR8, 128MB Valid (NAND, IP only)
  MEM_WriteU32(0x402F0004,0x00000020); // IOCR, SEMC_RDY as NAND Ready; SEMC_CSX1 as NAND CS; SEMC_A8 as SDRAM A8

  // SDRAM Configuration Registers
  MEM_WriteU32(0x402F0040,0x00000F31); // SDRAMCR0
  MEM_WriteU32(0x402F0044,0x00652922); // SDRAMCR1
  MEM_WriteU32(0x402F0048,0x00010920); // SDRAMCR2
  MEM_WriteU32(0x402F004C,0x50210A08); // SDRAMCR3

  MEM_WriteU32(0x402F0094,0x00000002); // IPCR1
  MEM_WriteU32(0x402F0098,0x00000000); // IPCR2
  MEM_WriteU32(0x402F0090,0x80000000); // IPCR0

  MEM_WriteU32(0x402F009C,0xA55A000F); // IPCMD, SD_CC_IPREA
  SDRAM_WaitIpCmdDone();
  MEM_WriteU32(0x402F0090,0x80000000); // IPCR0
  MEM_WriteU32(0x402F009C,0xA55A000C); // SD_CC_IAF
  SDRAM_WaitIpCmdDone();
  MEM_WriteU32(0x402F0090,0x80000000); // IPCR0
  MEM_WriteU32(0x402F009C,0xA55A000C); // SD_CC_IAF
  SDRAM_WaitIpCmdDone();
  MEM_WriteU32(0x402F00A0,0x00000033); // IPTXDAT
  MEM_WriteU32(0x402F0090,0x80000000); // IPCR0
  MEM_WriteU32(0x402F009C,0xA55A000A); // SD_CC_IMS
  SDRAM_WaitIpCmdDone();  
  MEM_WriteU32(0x402F004C,0x50210A09 ); // enable sdram self refresh again after initialization done.

  Report("SDRAM Init Done");
}

/* ConfigTarget */
void ConfigTargetSettings(void)
{
  Report("Config JTAG Speed to 4000kHz");
  JTAG_Speed = 4000;
}

/* SetupTarget */
void SetupTarget(void) {

  Report("Enabling i.MXRT SDRAM");
  Clock_Init();
  SDRAM_Init();
}

/* ResetTarget */
void ResetTarget(void) {
  unsigned int v;
  unsigned int Tmp;
  //
  // J-Link DLL expects CPU to be reset and halted when leaving this function
  //
  Report("J-Link script: ResetTarget()");
  // Read IDCODE
  v=JLINK_CORESIGHT_ReadDP(0);
  Report1("DP0: ", v);

  // Power up Debugger
  JLINK_CORESIGHT_WriteDP(1, 0x50000000);
  v=JLINK_CORESIGHT_ReadDP(1);
  Report1("DP1: ", v);


  JLINK_CORESIGHT_WriteAP(0, 0x23000042);
  v=JLINK_CORESIGHT_ReadAP(0);
  Report1("AHB-AP0: ", v);  

  JLINK_CORESIGHT_WriteAP(1, 0xE000EDF0);
  v=JLINK_CORESIGHT_ReadAP(1);
  Report1("AHB-AP1: ", v); 
  v=JLINK_CORESIGHT_ReadAP(3);
  Report1("AHB-AP3: ", v); 
  JLINK_CORESIGHT_WriteAP(3, 0xa05f0003);
  v=JLINK_CORESIGHT_ReadAP(3);
  Report1("AHB-AP3: ", v);

  Clock_Init();
  SDRAM_Init();
}
